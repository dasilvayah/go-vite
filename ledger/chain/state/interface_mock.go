// Code generated by MockGen. DO NOT EDIT.
// Source: ledger/chain/state/interface.go

// Package chain_state is a generated GoMock package.
package chain_state

import (
	big "math/big"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	xleveldb "github.com/vitelabs/go-vite/v2/common/db/xleveldb"
	memdb "github.com/vitelabs/go-vite/v2/common/db/xleveldb/memdb"
	types "github.com/vitelabs/go-vite/v2/common/types"
	interfaces "github.com/vitelabs/go-vite/v2/interfaces"
	core "github.com/vitelabs/go-vite/v2/interfaces/core"
	db "github.com/vitelabs/go-vite/v2/ledger/chain/db"
	core0 "github.com/vitelabs/go-vite/v2/ledger/consensus/core"
)

// MockConsensus is a mock of Consensus interface.
type MockConsensus struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusMockRecorder
}

// MockConsensusMockRecorder is the mock recorder for MockConsensus.
type MockConsensusMockRecorder struct {
	mock *MockConsensus
}

// NewMockConsensus creates a new mock instance.
func NewMockConsensus(ctrl *gomock.Controller) *MockConsensus {
	mock := &MockConsensus{ctrl: ctrl}
	mock.recorder = &MockConsensusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensus) EXPECT() *MockConsensusMockRecorder {
	return m.recorder
}

// SBPReader mocks base method.
func (m *MockConsensus) SBPReader() core0.SBPStatReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SBPReader")
	ret0, _ := ret[0].(core0.SBPStatReader)
	return ret0
}

// SBPReader indicates an expected call of SBPReader.
func (mr *MockConsensusMockRecorder) SBPReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SBPReader", reflect.TypeOf((*MockConsensus)(nil).SBPReader))
}

// VerifyAccountProducer mocks base method.
func (m *MockConsensus) VerifyAccountProducer(block *core.AccountBlock) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccountProducer", block)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAccountProducer indicates an expected call of VerifyAccountProducer.
func (mr *MockConsensusMockRecorder) VerifyAccountProducer(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccountProducer", reflect.TypeOf((*MockConsensus)(nil).VerifyAccountProducer), block)
}

// MockTimeIndex is a mock of TimeIndex interface.
type MockTimeIndex struct {
	ctrl     *gomock.Controller
	recorder *MockTimeIndexMockRecorder
}

// MockTimeIndexMockRecorder is the mock recorder for MockTimeIndex.
type MockTimeIndexMockRecorder struct {
	mock *MockTimeIndex
}

// NewMockTimeIndex creates a new mock instance.
func NewMockTimeIndex(ctrl *gomock.Controller) *MockTimeIndex {
	mock := &MockTimeIndex{ctrl: ctrl}
	mock.recorder = &MockTimeIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeIndex) EXPECT() *MockTimeIndexMockRecorder {
	return m.recorder
}

// Index2Time mocks base method.
func (m *MockTimeIndex) Index2Time(index uint64) (time.Time, time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index2Time", index)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// Index2Time indicates an expected call of Index2Time.
func (mr *MockTimeIndexMockRecorder) Index2Time(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index2Time", reflect.TypeOf((*MockTimeIndex)(nil).Index2Time), index)
}

// Time2Index mocks base method.
func (m *MockTimeIndex) Time2Index(t time.Time) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time2Index", t)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Time2Index indicates an expected call of Time2Index.
func (mr *MockTimeIndexMockRecorder) Time2Index(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time2Index", reflect.TypeOf((*MockTimeIndex)(nil).Time2Index), t)
}

// MockChain is a mock of Chain interface.
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *MockChainMockRecorder
}

// MockChainMockRecorder is the mock recorder for MockChain.
type MockChainMockRecorder struct {
	mock *MockChain
}

// NewMockChain creates a new mock instance.
func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &MockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChain) EXPECT() *MockChainMockRecorder {
	return m.recorder
}

// GetAccountBlockByHash mocks base method.
func (m *MockChain) GetAccountBlockByHash(blockHash types.Hash) (*core.AccountBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBlockByHash", blockHash)
	ret0, _ := ret[0].(*core.AccountBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBlockByHash indicates an expected call of GetAccountBlockByHash.
func (mr *MockChainMockRecorder) GetAccountBlockByHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBlockByHash", reflect.TypeOf((*MockChain)(nil).GetAccountBlockByHash), blockHash)
}

// GetLatestSnapshotBlock mocks base method.
func (m *MockChain) GetLatestSnapshotBlock() *core.SnapshotBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSnapshotBlock")
	ret0, _ := ret[0].(*core.SnapshotBlock)
	return ret0
}

// GetLatestSnapshotBlock indicates an expected call of GetLatestSnapshotBlock.
func (mr *MockChainMockRecorder) GetLatestSnapshotBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSnapshotBlock", reflect.TypeOf((*MockChain)(nil).GetLatestSnapshotBlock))
}

// GetSnapshotHeaderBeforeTime mocks base method.
func (m *MockChain) GetSnapshotHeaderBeforeTime(timestamp *time.Time) (*core.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotHeaderBeforeTime", timestamp)
	ret0, _ := ret[0].(*core.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotHeaderBeforeTime indicates an expected call of GetSnapshotHeaderBeforeTime.
func (mr *MockChainMockRecorder) GetSnapshotHeaderBeforeTime(timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotHeaderBeforeTime", reflect.TypeOf((*MockChain)(nil).GetSnapshotHeaderBeforeTime), timestamp)
}

// GetSnapshotHeaderByHeight mocks base method.
func (m *MockChain) GetSnapshotHeaderByHeight(height uint64) (*core.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotHeaderByHeight", height)
	ret0, _ := ret[0].(*core.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotHeaderByHeight indicates an expected call of GetSnapshotHeaderByHeight.
func (mr *MockChainMockRecorder) GetSnapshotHeaderByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotHeaderByHeight", reflect.TypeOf((*MockChain)(nil).GetSnapshotHeaderByHeight), height)
}

// GetSnapshotHeadersAfterOrEqualTime mocks base method.
func (m *MockChain) GetSnapshotHeadersAfterOrEqualTime(endHashHeight *core.HashHeight, startTime *time.Time, producer *types.Address) ([]*core.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotHeadersAfterOrEqualTime", endHashHeight, startTime, producer)
	ret0, _ := ret[0].([]*core.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotHeadersAfterOrEqualTime indicates an expected call of GetSnapshotHeadersAfterOrEqualTime.
func (mr *MockChainMockRecorder) GetSnapshotHeadersAfterOrEqualTime(endHashHeight, startTime, producer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotHeadersAfterOrEqualTime", reflect.TypeOf((*MockChain)(nil).GetSnapshotHeadersAfterOrEqualTime), endHashHeight, startTime, producer)
}

// GetSnapshotHeightByHash mocks base method.
func (m *MockChain) GetSnapshotHeightByHash(hash types.Hash) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotHeightByHash", hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotHeightByHash indicates an expected call of GetSnapshotHeightByHash.
func (mr *MockChainMockRecorder) GetSnapshotHeightByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotHeightByHash", reflect.TypeOf((*MockChain)(nil).GetSnapshotHeightByHash), hash)
}

// GetUnconfirmedBlocks mocks base method.
func (m *MockChain) GetUnconfirmedBlocks(addr types.Address) []*core.AccountBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnconfirmedBlocks", addr)
	ret0, _ := ret[0].([]*core.AccountBlock)
	return ret0
}

// GetUnconfirmedBlocks indicates an expected call of GetUnconfirmedBlocks.
func (mr *MockChainMockRecorder) GetUnconfirmedBlocks(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnconfirmedBlocks", reflect.TypeOf((*MockChain)(nil).GetUnconfirmedBlocks), addr)
}

// IterateAccounts mocks base method.
func (m *MockChain) IterateAccounts(iterateFunc func(types.Address, uint64, error) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateAccounts", iterateFunc)
}

// IterateAccounts indicates an expected call of IterateAccounts.
func (mr *MockChainMockRecorder) IterateAccounts(iterateFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateAccounts", reflect.TypeOf((*MockChain)(nil).IterateAccounts), iterateFunc)
}

// QueryLatestSnapshotBlock mocks base method.
func (m *MockChain) QueryLatestSnapshotBlock() (*core.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestSnapshotBlock")
	ret0, _ := ret[0].(*core.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestSnapshotBlock indicates an expected call of QueryLatestSnapshotBlock.
func (mr *MockChainMockRecorder) QueryLatestSnapshotBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestSnapshotBlock", reflect.TypeOf((*MockChain)(nil).QueryLatestSnapshotBlock))
}

// RecoverWrite mocks base method.
func (m *MockChain) RecoverWrite() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecoverWrite")
}

// RecoverWrite indicates an expected call of RecoverWrite.
func (mr *MockChainMockRecorder) RecoverWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverWrite", reflect.TypeOf((*MockChain)(nil).RecoverWrite))
}

// StopWrite mocks base method.
func (m *MockChain) StopWrite() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopWrite")
}

// StopWrite indicates an expected call of StopWrite.
func (mr *MockChainMockRecorder) StopWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWrite", reflect.TypeOf((*MockChain)(nil).StopWrite))
}

// MockRoundCacheInterface is a mock of RoundCacheInterface interface.
type MockRoundCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoundCacheInterfaceMockRecorder
}

// MockRoundCacheInterfaceMockRecorder is the mock recorder for MockRoundCacheInterface.
type MockRoundCacheInterfaceMockRecorder struct {
	mock *MockRoundCacheInterface
}

// NewMockRoundCacheInterface creates a new mock instance.
func NewMockRoundCacheInterface(ctrl *gomock.Controller) *MockRoundCacheInterface {
	mock := &MockRoundCacheInterface{ctrl: ctrl}
	mock.recorder = &MockRoundCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundCacheInterface) EXPECT() *MockRoundCacheInterfaceMockRecorder {
	return m.recorder
}

// DeleteSnapshotBlocks mocks base method.
func (m *MockRoundCacheInterface) DeleteSnapshotBlocks(snapshotBlocks []*core.SnapshotBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotBlocks", snapshotBlocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshotBlocks indicates an expected call of DeleteSnapshotBlocks.
func (mr *MockRoundCacheInterfaceMockRecorder) DeleteSnapshotBlocks(snapshotBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotBlocks", reflect.TypeOf((*MockRoundCacheInterface)(nil).DeleteSnapshotBlocks), snapshotBlocks)
}

// GetSnapshotViteBalanceList mocks base method.
func (m *MockRoundCacheInterface) GetSnapshotViteBalanceList(snapshotHash types.Hash, addrList []types.Address) (map[types.Address]*big.Int, []types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotViteBalanceList", snapshotHash, addrList)
	ret0, _ := ret[0].(map[types.Address]*big.Int)
	ret1, _ := ret[1].([]types.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnapshotViteBalanceList indicates an expected call of GetSnapshotViteBalanceList.
func (mr *MockRoundCacheInterfaceMockRecorder) GetSnapshotViteBalanceList(snapshotHash, addrList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotViteBalanceList", reflect.TypeOf((*MockRoundCacheInterface)(nil).GetSnapshotViteBalanceList), snapshotHash, addrList)
}

// Init mocks base method.
func (m *MockRoundCacheInterface) Init(timeIndex core0.TimeIndex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", timeIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockRoundCacheInterfaceMockRecorder) Init(timeIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRoundCacheInterface)(nil).Init), timeIndex)
}

// InsertSnapshotBlock mocks base method.
func (m *MockRoundCacheInterface) InsertSnapshotBlock(snapshotBlock *core.SnapshotBlock, snapshotLog SnapshotLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSnapshotBlock", snapshotBlock, snapshotLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSnapshotBlock indicates an expected call of InsertSnapshotBlock.
func (mr *MockRoundCacheInterfaceMockRecorder) InsertSnapshotBlock(snapshotBlock, snapshotLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSnapshotBlock", reflect.TypeOf((*MockRoundCacheInterface)(nil).InsertSnapshotBlock), snapshotBlock, snapshotLog)
}

// StorageIterator mocks base method.
func (m *MockRoundCacheInterface) StorageIterator(snapshotHash types.Hash) interfaces.StorageIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageIterator", snapshotHash)
	ret0, _ := ret[0].(interfaces.StorageIterator)
	return ret0
}

// StorageIterator indicates an expected call of StorageIterator.
func (mr *MockRoundCacheInterfaceMockRecorder) StorageIterator(snapshotHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageIterator", reflect.TypeOf((*MockRoundCacheInterface)(nil).StorageIterator), snapshotHash)
}

// buildCurrentData mocks base method.
func (m *MockRoundCacheInterface) buildCurrentData(prevCurrentData *memdb.DB, redoLogs *RoundCacheRedoLogs) *memdb.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "buildCurrentData", prevCurrentData, redoLogs)
	ret0, _ := ret[0].(*memdb.DB)
	return ret0
}

// buildCurrentData indicates an expected call of buildCurrentData.
func (mr *MockRoundCacheInterfaceMockRecorder) buildCurrentData(prevCurrentData, redoLogs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "buildCurrentData", reflect.TypeOf((*MockRoundCacheInterface)(nil).buildCurrentData), prevCurrentData, redoLogs)
}

// getCurrentData mocks base method.
func (m *MockRoundCacheInterface) getCurrentData(snapshotHash types.Hash) *memdb.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCurrentData", snapshotHash)
	ret0, _ := ret[0].(*memdb.DB)
	return ret0
}

// getCurrentData indicates an expected call of getCurrentData.
func (mr *MockRoundCacheInterfaceMockRecorder) getCurrentData(snapshotHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCurrentData", reflect.TypeOf((*MockRoundCacheInterface)(nil).getCurrentData), snapshotHash)
}

// getRoundSnapshotBlocks mocks base method.
func (m *MockRoundCacheInterface) getRoundSnapshotBlocks(roundIndex uint64) ([]*core.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRoundSnapshotBlocks", roundIndex)
	ret0, _ := ret[0].([]*core.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRoundSnapshotBlocks indicates an expected call of getRoundSnapshotBlocks.
func (mr *MockRoundCacheInterfaceMockRecorder) getRoundSnapshotBlocks(roundIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRoundSnapshotBlocks", reflect.TypeOf((*MockRoundCacheInterface)(nil).getRoundSnapshotBlocks), roundIndex)
}

// initRounds mocks base method.
func (m *MockRoundCacheInterface) initRounds(startRoundIndex, endRoundIndex uint64) ([]*RedoCacheData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initRounds", startRoundIndex, endRoundIndex)
	ret0, _ := ret[0].([]*RedoCacheData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// initRounds indicates an expected call of initRounds.
func (mr *MockRoundCacheInterfaceMockRecorder) initRounds(startRoundIndex, endRoundIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initRounds", reflect.TypeOf((*MockRoundCacheInterface)(nil).initRounds), startRoundIndex, endRoundIndex)
}

// queryCurrentData mocks base method.
func (m *MockRoundCacheInterface) queryCurrentData(roundIndex uint64) (*memdb.DB, *core.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "queryCurrentData", roundIndex)
	ret0, _ := ret[0].(*memdb.DB)
	ret1, _ := ret[1].(*core.SnapshotBlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// queryCurrentData indicates an expected call of queryCurrentData.
func (mr *MockRoundCacheInterfaceMockRecorder) queryCurrentData(roundIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "queryCurrentData", reflect.TypeOf((*MockRoundCacheInterface)(nil).queryCurrentData), roundIndex)
}

// queryRedoLogs mocks base method.
func (m *MockRoundCacheInterface) queryRedoLogs(roundIndex uint64) (*RoundCacheRedoLogs, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "queryRedoLogs", roundIndex)
	ret0, _ := ret[0].(*RoundCacheRedoLogs)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// queryRedoLogs indicates an expected call of queryRedoLogs.
func (mr *MockRoundCacheInterfaceMockRecorder) queryRedoLogs(roundIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "queryRedoLogs", reflect.TypeOf((*MockRoundCacheInterface)(nil).queryRedoLogs), roundIndex)
}

// roundToLastSnapshotBlock mocks base method.
func (m *MockRoundCacheInterface) roundToLastSnapshotBlock(roundIndex uint64) (*core.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "roundToLastSnapshotBlock", roundIndex)
	ret0, _ := ret[0].(*core.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// roundToLastSnapshotBlock indicates an expected call of roundToLastSnapshotBlock.
func (mr *MockRoundCacheInterfaceMockRecorder) roundToLastSnapshotBlock(roundIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "roundToLastSnapshotBlock", reflect.TypeOf((*MockRoundCacheInterface)(nil).roundToLastSnapshotBlock), roundIndex)
}

// setAllBalanceToCache mocks base method.
func (m *MockRoundCacheInterface) setAllBalanceToCache(roundData *memdb.DB, snapshotHash types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setAllBalanceToCache", roundData, snapshotHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// setAllBalanceToCache indicates an expected call of setAllBalanceToCache.
func (mr *MockRoundCacheInterfaceMockRecorder) setAllBalanceToCache(roundData, snapshotHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setAllBalanceToCache", reflect.TypeOf((*MockRoundCacheInterface)(nil).setAllBalanceToCache), roundData, snapshotHash)
}

// setBalanceToCache mocks base method.
func (m *MockRoundCacheInterface) setBalanceToCache(roundData *memdb.DB, snapshotHash types.Hash, addressList []types.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setBalanceToCache", roundData, snapshotHash, addressList)
	ret0, _ := ret[0].(error)
	return ret0
}

// setBalanceToCache indicates an expected call of setBalanceToCache.
func (mr *MockRoundCacheInterfaceMockRecorder) setBalanceToCache(roundData, snapshotHash, addressList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setBalanceToCache", reflect.TypeOf((*MockRoundCacheInterface)(nil).setBalanceToCache), roundData, snapshotHash, addressList)
}

// setStorageToCache mocks base method.
func (m *MockRoundCacheInterface) setStorageToCache(roundData *memdb.DB, contractAddress types.Address, snapshotHash types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setStorageToCache", roundData, contractAddress, snapshotHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// setStorageToCache indicates an expected call of setStorageToCache.
func (mr *MockRoundCacheInterfaceMockRecorder) setStorageToCache(roundData, contractAddress, snapshotHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setStorageToCache", reflect.TypeOf((*MockRoundCacheInterface)(nil).setStorageToCache), roundData, contractAddress, snapshotHash)
}

// MockStateDBInterface is a mock of StateDBInterface interface.
type MockStateDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStateDBInterfaceMockRecorder
}

// MockStateDBInterfaceMockRecorder is the mock recorder for MockStateDBInterface.
type MockStateDBInterfaceMockRecorder struct {
	mock *MockStateDBInterface
}

// NewMockStateDBInterface creates a new mock instance.
func NewMockStateDBInterface(ctrl *gomock.Controller) *MockStateDBInterface {
	mock := &MockStateDBInterface{ctrl: ctrl}
	mock.recorder = &MockStateDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateDBInterface) EXPECT() *MockStateDBInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStateDBInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStateDBInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStateDBInterface)(nil).Close))
}

// GetBalance mocks base method.
func (m *MockStateDBInterface) GetBalance(addr types.Address, tokenTypeId types.TokenTypeId) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", addr, tokenTypeId)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateDBInterfaceMockRecorder) GetBalance(addr, tokenTypeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStateDBInterface)(nil).GetBalance), addr, tokenTypeId)
}

// GetBalanceMap mocks base method.
func (m *MockStateDBInterface) GetBalanceMap(addr types.Address) (map[types.TokenTypeId]*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceMap", addr)
	ret0, _ := ret[0].(map[types.TokenTypeId]*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceMap indicates an expected call of GetBalanceMap.
func (mr *MockStateDBInterfaceMockRecorder) GetBalanceMap(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceMap", reflect.TypeOf((*MockStateDBInterface)(nil).GetBalanceMap), addr)
}

// GetCallDepth mocks base method.
func (m *MockStateDBInterface) GetCallDepth(sendBlockHash *types.Hash) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallDepth", sendBlockHash)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallDepth indicates an expected call of GetCallDepth.
func (mr *MockStateDBInterfaceMockRecorder) GetCallDepth(sendBlockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallDepth", reflect.TypeOf((*MockStateDBInterface)(nil).GetCallDepth), sendBlockHash)
}

// GetCode mocks base method.
func (m *MockStateDBInterface) GetCode(addr types.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", addr)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateDBInterfaceMockRecorder) GetCode(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockStateDBInterface)(nil).GetCode), addr)
}

// GetContractList mocks base method.
func (m *MockStateDBInterface) GetContractList(gid *types.Gid) ([]types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractList", gid)
	ret0, _ := ret[0].([]types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractList indicates an expected call of GetContractList.
func (mr *MockStateDBInterfaceMockRecorder) GetContractList(gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractList", reflect.TypeOf((*MockStateDBInterface)(nil).GetContractList), gid)
}

// GetContractMeta mocks base method.
func (m *MockStateDBInterface) GetContractMeta(addr types.Address) (*core.ContractMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractMeta", addr)
	ret0, _ := ret[0].(*core.ContractMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractMeta indicates an expected call of GetContractMeta.
func (mr *MockStateDBInterfaceMockRecorder) GetContractMeta(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractMeta", reflect.TypeOf((*MockStateDBInterface)(nil).GetContractMeta), addr)
}

// GetSnapshotBalanceList mocks base method.
func (m *MockStateDBInterface) GetSnapshotBalanceList(balanceMap map[types.Address]*big.Int, snapshotBlockHash types.Hash, addrList []types.Address, tokenId types.TokenTypeId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotBalanceList", balanceMap, snapshotBlockHash, addrList, tokenId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSnapshotBalanceList indicates an expected call of GetSnapshotBalanceList.
func (mr *MockStateDBInterfaceMockRecorder) GetSnapshotBalanceList(balanceMap, snapshotBlockHash, addrList, tokenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotBalanceList", reflect.TypeOf((*MockStateDBInterface)(nil).GetSnapshotBalanceList), balanceMap, snapshotBlockHash, addrList, tokenId)
}

// GetSnapshotValue mocks base method.
func (m *MockStateDBInterface) GetSnapshotValue(snapshotBlockHeight uint64, addr types.Address, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotValue", snapshotBlockHeight, addr, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotValue indicates an expected call of GetSnapshotValue.
func (mr *MockStateDBInterfaceMockRecorder) GetSnapshotValue(snapshotBlockHeight, addr, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotValue", reflect.TypeOf((*MockStateDBInterface)(nil).GetSnapshotValue), snapshotBlockHeight, addr, key)
}

// GetStatus mocks base method.
func (m *MockStateDBInterface) GetStatus() []interfaces.DBStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].([]interfaces.DBStatus)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockStateDBInterfaceMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockStateDBInterface)(nil).GetStatus))
}

// GetStorageValue mocks base method.
func (m *MockStateDBInterface) GetStorageValue(addr *types.Address, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageValue", addr, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageValue indicates an expected call of GetStorageValue.
func (mr *MockStateDBInterfaceMockRecorder) GetStorageValue(addr, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageValue", reflect.TypeOf((*MockStateDBInterface)(nil).GetStorageValue), addr, key)
}

// GetVmLogList mocks base method.
func (m *MockStateDBInterface) GetVmLogList(logHash *types.Hash) (core.VmLogList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVmLogList", logHash)
	ret0, _ := ret[0].(core.VmLogList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVmLogList indicates an expected call of GetVmLogList.
func (mr *MockStateDBInterfaceMockRecorder) GetVmLogList(logHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVmLogList", reflect.TypeOf((*MockStateDBInterface)(nil).GetVmLogList), logHash)
}

// HasContractMeta mocks base method.
func (m *MockStateDBInterface) HasContractMeta(addr types.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasContractMeta", addr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasContractMeta indicates an expected call of HasContractMeta.
func (mr *MockStateDBInterfaceMockRecorder) HasContractMeta(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasContractMeta", reflect.TypeOf((*MockStateDBInterface)(nil).HasContractMeta), addr)
}

// Init mocks base method.
func (m *MockStateDBInterface) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStateDBInterfaceMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStateDBInterface)(nil).Init))
}

// InsertSnapshotBlock mocks base method.
func (m *MockStateDBInterface) InsertSnapshotBlock(snapshotBlock *core.SnapshotBlock, confirmedBlocks []*core.AccountBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSnapshotBlock", snapshotBlock, confirmedBlocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSnapshotBlock indicates an expected call of InsertSnapshotBlock.
func (mr *MockStateDBInterfaceMockRecorder) InsertSnapshotBlock(snapshotBlock, confirmedBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSnapshotBlock", reflect.TypeOf((*MockStateDBInterface)(nil).InsertSnapshotBlock), snapshotBlock, confirmedBlocks)
}

// IterateContracts mocks base method.
func (m *MockStateDBInterface) IterateContracts(iterateFunc func(types.Address, *core.ContractMeta, error) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateContracts", iterateFunc)
}

// IterateContracts indicates an expected call of IterateContracts.
func (mr *MockStateDBInterfaceMockRecorder) IterateContracts(iterateFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateContracts", reflect.TypeOf((*MockStateDBInterface)(nil).IterateContracts), iterateFunc)
}

// NewRawSnapshotStorageIteratorByHeight mocks base method.
func (m *MockStateDBInterface) NewRawSnapshotStorageIteratorByHeight(snapshotHeight uint64, addr types.Address, prefix []byte) interfaces.StorageIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRawSnapshotStorageIteratorByHeight", snapshotHeight, addr, prefix)
	ret0, _ := ret[0].(interfaces.StorageIterator)
	return ret0
}

// NewRawSnapshotStorageIteratorByHeight indicates an expected call of NewRawSnapshotStorageIteratorByHeight.
func (mr *MockStateDBInterfaceMockRecorder) NewRawSnapshotStorageIteratorByHeight(snapshotHeight, addr, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRawSnapshotStorageIteratorByHeight", reflect.TypeOf((*MockStateDBInterface)(nil).NewRawSnapshotStorageIteratorByHeight), snapshotHeight, addr, prefix)
}

// NewSnapshotStorageIterator mocks base method.
func (m *MockStateDBInterface) NewSnapshotStorageIterator(snapshotHash types.Hash, addr types.Address, prefix []byte) (interfaces.StorageIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSnapshotStorageIterator", snapshotHash, addr, prefix)
	ret0, _ := ret[0].(interfaces.StorageIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSnapshotStorageIterator indicates an expected call of NewSnapshotStorageIterator.
func (mr *MockStateDBInterfaceMockRecorder) NewSnapshotStorageIterator(snapshotHash, addr, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSnapshotStorageIterator", reflect.TypeOf((*MockStateDBInterface)(nil).NewSnapshotStorageIterator), snapshotHash, addr, prefix)
}

// NewSnapshotStorageIteratorByHeight mocks base method.
func (m *MockStateDBInterface) NewSnapshotStorageIteratorByHeight(snapshotHeight uint64, addr types.Address, prefix []byte) (interfaces.StorageIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSnapshotStorageIteratorByHeight", snapshotHeight, addr, prefix)
	ret0, _ := ret[0].(interfaces.StorageIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSnapshotStorageIteratorByHeight indicates an expected call of NewSnapshotStorageIteratorByHeight.
func (mr *MockStateDBInterfaceMockRecorder) NewSnapshotStorageIteratorByHeight(snapshotHeight, addr, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSnapshotStorageIteratorByHeight", reflect.TypeOf((*MockStateDBInterface)(nil).NewSnapshotStorageIteratorByHeight), snapshotHeight, addr, prefix)
}

// NewStorageDatabase mocks base method.
func (m *MockStateDBInterface) NewStorageDatabase(snapshotHash types.Hash, addr types.Address) (StorageDatabaseInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStorageDatabase", snapshotHash, addr)
	ret0, _ := ret[0].(StorageDatabaseInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStorageDatabase indicates an expected call of NewStorageDatabase.
func (mr *MockStateDBInterfaceMockRecorder) NewStorageDatabase(snapshotHash, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStorageDatabase", reflect.TypeOf((*MockStateDBInterface)(nil).NewStorageDatabase), snapshotHash, addr)
}

// NewStorageIterator mocks base method.
func (m *MockStateDBInterface) NewStorageIterator(addr types.Address, prefix []byte) interfaces.StorageIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStorageIterator", addr, prefix)
	ret0, _ := ret[0].(interfaces.StorageIterator)
	return ret0
}

// NewStorageIterator indicates an expected call of NewStorageIterator.
func (mr *MockStateDBInterfaceMockRecorder) NewStorageIterator(addr, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStorageIterator", reflect.TypeOf((*MockStateDBInterface)(nil).NewStorageIterator), addr, prefix)
}

// Redo mocks base method.
func (m *MockStateDBInterface) Redo() RedoInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redo")
	ret0, _ := ret[0].(RedoInterface)
	return ret0
}

// Redo indicates an expected call of Redo.
func (mr *MockStateDBInterfaceMockRecorder) Redo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redo", reflect.TypeOf((*MockStateDBInterface)(nil).Redo))
}

// RedoStore mocks base method.
func (m *MockStateDBInterface) RedoStore() *db.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedoStore")
	ret0, _ := ret[0].(*db.Store)
	return ret0
}

// RedoStore indicates an expected call of RedoStore.
func (mr *MockStateDBInterfaceMockRecorder) RedoStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedoStore", reflect.TypeOf((*MockStateDBInterface)(nil).RedoStore))
}

// RollbackAccountBlocks mocks base method.
func (m *MockStateDBInterface) RollbackAccountBlocks(accountBlocks []*core.AccountBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackAccountBlocks", accountBlocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackAccountBlocks indicates an expected call of RollbackAccountBlocks.
func (mr *MockStateDBInterfaceMockRecorder) RollbackAccountBlocks(accountBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackAccountBlocks", reflect.TypeOf((*MockStateDBInterface)(nil).RollbackAccountBlocks), accountBlocks)
}

// RollbackSnapshotBlocks mocks base method.
func (m *MockStateDBInterface) RollbackSnapshotBlocks(deletedSnapshotSegments []*core.SnapshotChunk, newUnconfirmedBlocks []*core.AccountBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackSnapshotBlocks", deletedSnapshotSegments, newUnconfirmedBlocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackSnapshotBlocks indicates an expected call of RollbackSnapshotBlocks.
func (mr *MockStateDBInterfaceMockRecorder) RollbackSnapshotBlocks(deletedSnapshotSegments, newUnconfirmedBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackSnapshotBlocks", reflect.TypeOf((*MockStateDBInterface)(nil).RollbackSnapshotBlocks), deletedSnapshotSegments, newUnconfirmedBlocks)
}

// SetCacheLevelForConsensus mocks base method.
func (m *MockStateDBInterface) SetCacheLevelForConsensus(level uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCacheLevelForConsensus", level)
}

// SetCacheLevelForConsensus indicates an expected call of SetCacheLevelForConsensus.
func (mr *MockStateDBInterfaceMockRecorder) SetCacheLevelForConsensus(level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacheLevelForConsensus", reflect.TypeOf((*MockStateDBInterface)(nil).SetCacheLevelForConsensus), level)
}

// SetTimeIndex mocks base method.
func (m *MockStateDBInterface) SetTimeIndex(periodTimeIndex interfaces.TimeIndex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimeIndex", periodTimeIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimeIndex indicates an expected call of SetTimeIndex.
func (mr *MockStateDBInterfaceMockRecorder) SetTimeIndex(periodTimeIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeIndex", reflect.TypeOf((*MockStateDBInterface)(nil).SetTimeIndex), periodTimeIndex)
}

// Store mocks base method.
func (m *MockStateDBInterface) Store() *db.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store")
	ret0, _ := ret[0].(*db.Store)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockStateDBInterfaceMockRecorder) Store() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStateDBInterface)(nil).Store))
}

// Write mocks base method.
func (m *MockStateDBInterface) Write(block *interfaces.VmAccountBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockStateDBInterfaceMockRecorder) Write(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStateDBInterface)(nil).Write), block)
}

// WriteByRedo mocks base method.
func (m *MockStateDBInterface) WriteByRedo(blockHash types.Hash, addr types.Address, redoLog LogItem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteByRedo", blockHash, addr, redoLog)
}

// WriteByRedo indicates an expected call of WriteByRedo.
func (mr *MockStateDBInterfaceMockRecorder) WriteByRedo(blockHash, addr, redoLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByRedo", reflect.TypeOf((*MockStateDBInterface)(nil).WriteByRedo), blockHash, addr, redoLog)
}

// canWriteVmLog mocks base method.
func (m *MockStateDBInterface) canWriteVmLog(addr types.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "canWriteVmLog", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// canWriteVmLog indicates an expected call of canWriteVmLog.
func (mr *MockStateDBInterfaceMockRecorder) canWriteVmLog(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "canWriteVmLog", reflect.TypeOf((*MockStateDBInterface)(nil).canWriteVmLog), addr)
}

// compactHistoryStorage mocks base method.
func (m *MockStateDBInterface) compactHistoryStorage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "compactHistoryStorage")
}

// compactHistoryStorage indicates an expected call of compactHistoryStorage.
func (mr *MockStateDBInterfaceMockRecorder) compactHistoryStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "compactHistoryStorage", reflect.TypeOf((*MockStateDBInterface)(nil).compactHistoryStorage))
}

// copyValue mocks base method.
func (m *MockStateDBInterface) copyValue(value []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "copyValue", value)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// copyValue indicates an expected call of copyValue.
func (mr *MockStateDBInterfaceMockRecorder) copyValue(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "copyValue", reflect.TypeOf((*MockStateDBInterface)(nil).copyValue), value)
}

// deleteBalance mocks base method.
func (m *MockStateDBInterface) deleteBalance(batch interfaces.Batch, key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteBalance", batch, key)
}

// deleteBalance indicates an expected call of deleteBalance.
func (mr *MockStateDBInterfaceMockRecorder) deleteBalance(batch, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteBalance", reflect.TypeOf((*MockStateDBInterface)(nil).deleteBalance), batch, key)
}

// deleteContractMeta mocks base method.
func (m *MockStateDBInterface) deleteContractMeta(batch interfaces.Batch, key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteContractMeta", batch, key)
}

// deleteContractMeta indicates an expected call of deleteContractMeta.
func (mr *MockStateDBInterfaceMockRecorder) deleteContractMeta(batch, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteContractMeta", reflect.TypeOf((*MockStateDBInterface)(nil).deleteContractMeta), batch, key)
}

// deleteHistoryKey mocks base method.
func (m *MockStateDBInterface) deleteHistoryKey(batch interfaces.Batch, key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteHistoryKey", batch, key)
}

// deleteHistoryKey indicates an expected call of deleteHistoryKey.
func (mr *MockStateDBInterfaceMockRecorder) deleteHistoryKey(batch, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteHistoryKey", reflect.TypeOf((*MockStateDBInterface)(nil).deleteHistoryKey), batch, key)
}

// disableCache mocks base method.
func (m *MockStateDBInterface) disableCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "disableCache")
}

// disableCache indicates an expected call of disableCache.
func (mr *MockStateDBInterfaceMockRecorder) disableCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "disableCache", reflect.TypeOf((*MockStateDBInterface)(nil).disableCache))
}

// enableCache mocks base method.
func (m *MockStateDBInterface) enableCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "enableCache")
}

// enableCache indicates an expected call of enableCache.
func (mr *MockStateDBInterfaceMockRecorder) enableCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enableCache", reflect.TypeOf((*MockStateDBInterface)(nil).enableCache))
}

// getSnapshotBalanceList mocks base method.
func (m *MockStateDBInterface) getSnapshotBalanceList(balanceMap map[types.Address]*big.Int, snapshotBlockHash types.Hash, addrList []types.Address, tokenId types.TokenTypeId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSnapshotBalanceList", balanceMap, snapshotBlockHash, addrList, tokenId)
	ret0, _ := ret[0].(error)
	return ret0
}

// getSnapshotBalanceList indicates an expected call of getSnapshotBalanceList.
func (mr *MockStateDBInterfaceMockRecorder) getSnapshotBalanceList(balanceMap, snapshotBlockHash, addrList, tokenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSnapshotBalanceList", reflect.TypeOf((*MockStateDBInterface)(nil).getSnapshotBalanceList), balanceMap, snapshotBlockHash, addrList, tokenId)
}

// getValue mocks base method.
func (m *MockStateDBInterface) getValue(key []byte, cachePrefix string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getValue", key, cachePrefix)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getValue indicates an expected call of getValue.
func (mr *MockStateDBInterfaceMockRecorder) getValue(key, cachePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getValue", reflect.TypeOf((*MockStateDBInterface)(nil).getValue), key, cachePrefix)
}

// getValueInCache mocks base method.
func (m *MockStateDBInterface) getValueInCache(key []byte, cachePrefix string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getValueInCache", key, cachePrefix)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getValueInCache indicates an expected call of getValueInCache.
func (mr *MockStateDBInterfaceMockRecorder) getValueInCache(key, cachePrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getValueInCache", reflect.TypeOf((*MockStateDBInterface)(nil).getValueInCache), key, cachePrefix)
}

// initCache mocks base method.
func (m *MockStateDBInterface) initCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// initCache indicates an expected call of initCache.
func (mr *MockStateDBInterfaceMockRecorder) initCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initCache", reflect.TypeOf((*MockStateDBInterface)(nil).initCache))
}

// initContractMetaCache mocks base method.
func (m *MockStateDBInterface) initContractMetaCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initContractMetaCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// initContractMetaCache indicates an expected call of initContractMetaCache.
func (mr *MockStateDBInterfaceMockRecorder) initContractMetaCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initContractMetaCache", reflect.TypeOf((*MockStateDBInterface)(nil).initContractMetaCache))
}

// initSnapshotValueCache mocks base method.
func (m *MockStateDBInterface) initSnapshotValueCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initSnapshotValueCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// initSnapshotValueCache indicates an expected call of initSnapshotValueCache.
func (mr *MockStateDBInterfaceMockRecorder) initSnapshotValueCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initSnapshotValueCache", reflect.TypeOf((*MockStateDBInterface)(nil).initSnapshotValueCache))
}

// newCache mocks base method.
func (m *MockStateDBInterface) newCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// newCache indicates an expected call of newCache.
func (mr *MockStateDBInterfaceMockRecorder) newCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newCache", reflect.TypeOf((*MockStateDBInterface)(nil).newCache))
}

// parseStorageKey mocks base method.
func (m *MockStateDBInterface) parseStorageKey(key []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "parseStorageKey", key)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// parseStorageKey indicates an expected call of parseStorageKey.
func (mr *MockStateDBInterfaceMockRecorder) parseStorageKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "parseStorageKey", reflect.TypeOf((*MockStateDBInterface)(nil).parseStorageKey), key)
}

// recoverBalanceToSnapshot mocks base method.
func (m *MockStateDBInterface) recoverBalanceToSnapshot(batch *xleveldb.Batch, height uint64, addr types.Address, tokenSet map[types.TokenTypeId]*big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "recoverBalanceToSnapshot", batch, height, addr, tokenSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// recoverBalanceToSnapshot indicates an expected call of recoverBalanceToSnapshot.
func (mr *MockStateDBInterfaceMockRecorder) recoverBalanceToSnapshot(batch, height, addr, tokenSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "recoverBalanceToSnapshot", reflect.TypeOf((*MockStateDBInterface)(nil).recoverBalanceToSnapshot), batch, height, addr, tokenSet)
}

// recoverLatestIndexByRedo mocks base method.
func (m *MockStateDBInterface) recoverLatestIndexByRedo(batch *xleveldb.Batch, addrMap map[types.Address]struct{}, redoLogMap map[types.Address][]LogItem, rollbackKeySet map[types.Address]map[string]struct{}, rollbackTokenSet map[types.Address]map[types.TokenTypeId]struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "recoverLatestIndexByRedo", batch, addrMap, redoLogMap, rollbackKeySet, rollbackTokenSet)
}

// recoverLatestIndexByRedo indicates an expected call of recoverLatestIndexByRedo.
func (mr *MockStateDBInterfaceMockRecorder) recoverLatestIndexByRedo(batch, addrMap, redoLogMap, rollbackKeySet, rollbackTokenSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "recoverLatestIndexByRedo", reflect.TypeOf((*MockStateDBInterface)(nil).recoverLatestIndexByRedo), batch, addrMap, redoLogMap, rollbackKeySet, rollbackTokenSet)
}

// recoverLatestIndexToSnapshot mocks base method.
func (m *MockStateDBInterface) recoverLatestIndexToSnapshot(batch *xleveldb.Batch, hashHeight core.HashHeight, keySetMap map[types.Address]map[string]struct{}, tokenSetMap map[types.Address]map[types.TokenTypeId]struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "recoverLatestIndexToSnapshot", batch, hashHeight, keySetMap, tokenSetMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// recoverLatestIndexToSnapshot indicates an expected call of recoverLatestIndexToSnapshot.
func (mr *MockStateDBInterfaceMockRecorder) recoverLatestIndexToSnapshot(batch, hashHeight, keySetMap, tokenSetMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "recoverLatestIndexToSnapshot", reflect.TypeOf((*MockStateDBInterface)(nil).recoverLatestIndexToSnapshot), batch, hashHeight, keySetMap, tokenSetMap)
}

// recoverStorageToSnapshot mocks base method.
func (m *MockStateDBInterface) recoverStorageToSnapshot(batch *xleveldb.Batch, height uint64, addr types.Address, keySet map[string][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "recoverStorageToSnapshot", batch, height, addr, keySet)
	ret0, _ := ret[0].(error)
	return ret0
}

// recoverStorageToSnapshot indicates an expected call of recoverStorageToSnapshot.
func (mr *MockStateDBInterfaceMockRecorder) recoverStorageToSnapshot(batch, height, addr, keySet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "recoverStorageToSnapshot", reflect.TypeOf((*MockStateDBInterface)(nil).recoverStorageToSnapshot), batch, height, addr, keySet)
}

// recoverToSnapshot mocks base method.
func (m *MockStateDBInterface) recoverToSnapshot(batch *xleveldb.Batch, snapshotHeight uint64, unconfirmedLog map[types.Address][]LogItem, addrMap map[types.Address]struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "recoverToSnapshot", batch, snapshotHeight, unconfirmedLog, addrMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// recoverToSnapshot indicates an expected call of recoverToSnapshot.
func (mr *MockStateDBInterfaceMockRecorder) recoverToSnapshot(batch, snapshotHeight, unconfirmedLog, addrMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "recoverToSnapshot", reflect.TypeOf((*MockStateDBInterface)(nil).recoverToSnapshot), batch, snapshotHeight, unconfirmedLog, addrMap)
}

// rollbackAccountBlock mocks base method.
func (m *MockStateDBInterface) rollbackAccountBlock(batch *xleveldb.Batch, accountBlock *core.AccountBlock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "rollbackAccountBlock", batch, accountBlock)
}

// rollbackAccountBlock indicates an expected call of rollbackAccountBlock.
func (mr *MockStateDBInterfaceMockRecorder) rollbackAccountBlock(batch, accountBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rollbackAccountBlock", reflect.TypeOf((*MockStateDBInterface)(nil).rollbackAccountBlock), batch, accountBlock)
}

// rollbackByRedo mocks base method.
func (m *MockStateDBInterface) rollbackByRedo(batch *xleveldb.Batch, snapshotBlock *core.SnapshotBlock, redoLogMap map[types.Address][]LogItem, rollbackKeySet map[types.Address]map[string]struct{}, rollbackTokenSet map[types.Address]map[types.TokenTypeId]struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "rollbackByRedo", batch, snapshotBlock, redoLogMap, rollbackKeySet, rollbackTokenSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// rollbackByRedo indicates an expected call of rollbackByRedo.
func (mr *MockStateDBInterfaceMockRecorder) rollbackByRedo(batch, snapshotBlock, redoLogMap, rollbackKeySet, rollbackTokenSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rollbackByRedo", reflect.TypeOf((*MockStateDBInterface)(nil).rollbackByRedo), batch, snapshotBlock, redoLogMap, rollbackKeySet, rollbackTokenSet)
}

// rollbackRoundCache mocks base method.
func (m *MockStateDBInterface) rollbackRoundCache(deletedSnapshotSegments []*core.SnapshotChunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "rollbackRoundCache", deletedSnapshotSegments)
	ret0, _ := ret[0].(error)
	return ret0
}

// rollbackRoundCache indicates an expected call of rollbackRoundCache.
func (mr *MockStateDBInterfaceMockRecorder) rollbackRoundCache(deletedSnapshotSegments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rollbackRoundCache", reflect.TypeOf((*MockStateDBInterface)(nil).rollbackRoundCache), deletedSnapshotSegments)
}

// writeBalance mocks base method.
func (m *MockStateDBInterface) writeBalance(batch interfaces.Batch, key, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "writeBalance", batch, key, value)
}

// writeBalance indicates an expected call of writeBalance.
func (mr *MockStateDBInterfaceMockRecorder) writeBalance(batch, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeBalance", reflect.TypeOf((*MockStateDBInterface)(nil).writeBalance), batch, key, value)
}

// writeContractMeta mocks base method.
func (m *MockStateDBInterface) writeContractMeta(batch interfaces.Batch, key, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "writeContractMeta", batch, key, value)
}

// writeContractMeta indicates an expected call of writeContractMeta.
func (mr *MockStateDBInterfaceMockRecorder) writeContractMeta(batch, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeContractMeta", reflect.TypeOf((*MockStateDBInterface)(nil).writeContractMeta), batch, key, value)
}

// writeHistoryKey mocks base method.
func (m *MockStateDBInterface) writeHistoryKey(batch interfaces.Batch, key, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "writeHistoryKey", batch, key, value)
}

// writeHistoryKey indicates an expected call of writeHistoryKey.
func (mr *MockStateDBInterfaceMockRecorder) writeHistoryKey(batch, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeHistoryKey", reflect.TypeOf((*MockStateDBInterface)(nil).writeHistoryKey), batch, key, value)
}

// MockStorageDatabaseInterface is a mock of StorageDatabaseInterface interface.
type MockStorageDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageDatabaseInterfaceMockRecorder
}

// MockStorageDatabaseInterfaceMockRecorder is the mock recorder for MockStorageDatabaseInterface.
type MockStorageDatabaseInterfaceMockRecorder struct {
	mock *MockStorageDatabaseInterface
}

// NewMockStorageDatabaseInterface creates a new mock instance.
func NewMockStorageDatabaseInterface(ctrl *gomock.Controller) *MockStorageDatabaseInterface {
	mock := &MockStorageDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockStorageDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageDatabaseInterface) EXPECT() *MockStorageDatabaseInterfaceMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockStorageDatabaseInterface) Address() *types.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(*types.Address)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockStorageDatabaseInterfaceMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockStorageDatabaseInterface)(nil).Address))
}

// GetValue mocks base method.
func (m *MockStorageDatabaseInterface) GetValue(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockStorageDatabaseInterfaceMockRecorder) GetValue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockStorageDatabaseInterface)(nil).GetValue), key)
}

// NewStorageIterator mocks base method.
func (m *MockStorageDatabaseInterface) NewStorageIterator(prefix []byte) (interfaces.StorageIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStorageIterator", prefix)
	ret0, _ := ret[0].(interfaces.StorageIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStorageIterator indicates an expected call of NewStorageIterator.
func (mr *MockStorageDatabaseInterfaceMockRecorder) NewStorageIterator(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStorageIterator", reflect.TypeOf((*MockStorageDatabaseInterface)(nil).NewStorageIterator), prefix)
}

// MockRedoInterface is a mock of RedoInterface interface.
type MockRedoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedoInterfaceMockRecorder
}

// MockRedoInterfaceMockRecorder is the mock recorder for MockRedoInterface.
type MockRedoInterfaceMockRecorder struct {
	mock *MockRedoInterface
}

// NewMockRedoInterface creates a new mock instance.
func NewMockRedoInterface(ctrl *gomock.Controller) *MockRedoInterface {
	mock := &MockRedoInterface{ctrl: ctrl}
	mock.recorder = &MockRedoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedoInterface) EXPECT() *MockRedoInterfaceMockRecorder {
	return m.recorder
}

// AddLog mocks base method.
func (m *MockRedoInterface) AddLog(addr types.Address, log LogItem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", addr, log)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockRedoInterfaceMockRecorder) AddLog(addr, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockRedoInterface)(nil).AddLog), addr, log)
}

// Close mocks base method.
func (m *MockRedoInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRedoInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedoInterface)(nil).Close))
}

// HasRedo mocks base method.
func (m *MockRedoInterface) HasRedo(snapshotHeight uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRedo", snapshotHeight)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRedo indicates an expected call of HasRedo.
func (mr *MockRedoInterfaceMockRecorder) HasRedo(snapshotHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRedo", reflect.TypeOf((*MockRedoInterface)(nil).HasRedo), snapshotHeight)
}

// InsertSnapshotBlock mocks base method.
func (m *MockRedoInterface) InsertSnapshotBlock(snapshotBlock *core.SnapshotBlock, confirmedBlocks []*core.AccountBlock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertSnapshotBlock", snapshotBlock, confirmedBlocks)
}

// InsertSnapshotBlock indicates an expected call of InsertSnapshotBlock.
func (mr *MockRedoInterfaceMockRecorder) InsertSnapshotBlock(snapshotBlock, confirmedBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSnapshotBlock", reflect.TypeOf((*MockRedoInterface)(nil).InsertSnapshotBlock), snapshotBlock, confirmedBlocks)
}

// QueryLog mocks base method.
func (m *MockRedoInterface) QueryLog(snapshotHeight uint64) (SnapshotLog, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLog", snapshotHeight)
	ret0, _ := ret[0].(SnapshotLog)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryLog indicates an expected call of QueryLog.
func (mr *MockRedoInterfaceMockRecorder) QueryLog(snapshotHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLog", reflect.TypeOf((*MockRedoInterface)(nil).QueryLog), snapshotHeight)
}

// Rollback mocks base method.
func (m *MockRedoInterface) Rollback(chunks []*core.SnapshotChunk) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", chunks)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRedoInterfaceMockRecorder) Rollback(chunks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRedoInterface)(nil).Rollback), chunks)
}

// SetCurrentSnapshot mocks base method.
func (m *MockRedoInterface) SetCurrentSnapshot(snapshotHeight uint64, logMap SnapshotLog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentSnapshot", snapshotHeight, logMap)
}

// SetCurrentSnapshot indicates an expected call of SetCurrentSnapshot.
func (mr *MockRedoInterfaceMockRecorder) SetCurrentSnapshot(snapshotHeight, logMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentSnapshot", reflect.TypeOf((*MockRedoInterface)(nil).SetCurrentSnapshot), snapshotHeight, logMap)
}

// initCache mocks base method.
func (m *MockRedoInterface) initCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// initCache indicates an expected call of initCache.
func (mr *MockRedoInterfaceMockRecorder) initCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initCache", reflect.TypeOf((*MockRedoInterface)(nil).initCache))
}
