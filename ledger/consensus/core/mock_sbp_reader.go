// Code generated by MockGen. DO NOT EDIT.
// Source: ledger/consensus/core/sbp_reader.go

// Package core is a generated GoMock package.
package core

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/vitelabs/go-vite/v2/common/types"
)

// MockSBPStatReader is a mock of SBPStatReader interface.
type MockSBPStatReader struct {
	ctrl     *gomock.Controller
	recorder *MockSBPStatReaderMockRecorder
}

// MockSBPStatReaderMockRecorder is the mock recorder for MockSBPStatReader.
type MockSBPStatReaderMockRecorder struct {
	mock *MockSBPStatReader
}

// NewMockSBPStatReader creates a new mock instance.
func NewMockSBPStatReader(ctrl *gomock.Controller) *MockSBPStatReader {
	mock := &MockSBPStatReader{ctrl: ctrl}
	mock.recorder = &MockSBPStatReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSBPStatReader) EXPECT() *MockSBPStatReaderMockRecorder {
	return m.recorder
}

// DayStats mocks base method.
func (m *MockSBPStatReader) DayStats(startIndex, endIndex uint64) ([]*DayStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DayStats", startIndex, endIndex)
	ret0, _ := ret[0].([]*DayStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DayStats indicates an expected call of DayStats.
func (mr *MockSBPStatReaderMockRecorder) DayStats(startIndex, endIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DayStats", reflect.TypeOf((*MockSBPStatReader)(nil).DayStats), startIndex, endIndex)
}

// GetDayTimeIndex mocks base method.
func (m *MockSBPStatReader) GetDayTimeIndex() TimeIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDayTimeIndex")
	ret0, _ := ret[0].(TimeIndex)
	return ret0
}

// GetDayTimeIndex indicates an expected call of GetDayTimeIndex.
func (mr *MockSBPStatReaderMockRecorder) GetDayTimeIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDayTimeIndex", reflect.TypeOf((*MockSBPStatReader)(nil).GetDayTimeIndex))
}

// GetHourTimeIndex mocks base method.
func (m *MockSBPStatReader) GetHourTimeIndex() TimeIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHourTimeIndex")
	ret0, _ := ret[0].(TimeIndex)
	return ret0
}

// GetHourTimeIndex indicates an expected call of GetHourTimeIndex.
func (mr *MockSBPStatReaderMockRecorder) GetHourTimeIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHourTimeIndex", reflect.TypeOf((*MockSBPStatReader)(nil).GetHourTimeIndex))
}

// GetNodeCount mocks base method.
func (m *MockSBPStatReader) GetNodeCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNodeCount indicates an expected call of GetNodeCount.
func (mr *MockSBPStatReaderMockRecorder) GetNodeCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeCount", reflect.TypeOf((*MockSBPStatReader)(nil).GetNodeCount))
}

// GetPeriodTimeIndex mocks base method.
func (m *MockSBPStatReader) GetPeriodTimeIndex() TimeIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeriodTimeIndex")
	ret0, _ := ret[0].(TimeIndex)
	return ret0
}

// GetPeriodTimeIndex indicates an expected call of GetPeriodTimeIndex.
func (mr *MockSBPStatReaderMockRecorder) GetPeriodTimeIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeriodTimeIndex", reflect.TypeOf((*MockSBPStatReader)(nil).GetPeriodTimeIndex))
}

// GetSuccessRateByHour mocks base method.
func (m *MockSBPStatReader) GetSuccessRateByHour(index uint64) (map[types.Address]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuccessRateByHour", index)
	ret0, _ := ret[0].(map[types.Address]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuccessRateByHour indicates an expected call of GetSuccessRateByHour.
func (mr *MockSBPStatReaderMockRecorder) GetSuccessRateByHour(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuccessRateByHour", reflect.TypeOf((*MockSBPStatReader)(nil).GetSuccessRateByHour), index)
}

// HourStats mocks base method.
func (m *MockSBPStatReader) HourStats(startIndex, endIndex uint64) ([]*HourStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HourStats", startIndex, endIndex)
	ret0, _ := ret[0].([]*HourStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HourStats indicates an expected call of HourStats.
func (mr *MockSBPStatReaderMockRecorder) HourStats(startIndex, endIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HourStats", reflect.TypeOf((*MockSBPStatReader)(nil).HourStats), startIndex, endIndex)
}

// PeriodStats mocks base method.
func (m *MockSBPStatReader) PeriodStats(startIndex, endIndex uint64) ([]*PeriodStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeriodStats", startIndex, endIndex)
	ret0, _ := ret[0].([]*PeriodStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeriodStats indicates an expected call of PeriodStats.
func (mr *MockSBPStatReaderMockRecorder) PeriodStats(startIndex, endIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeriodStats", reflect.TypeOf((*MockSBPStatReader)(nil).PeriodStats), startIndex, endIndex)
}
